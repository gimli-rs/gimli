name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        rust_channel: ["stable", "beta", "nightly", "1.51.0"]
        include:
          - rust_channel: "stable"
            os: "macOS-latest"
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v3
    - name: Install rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{matrix.rust_channel}}
    - name: MSRV dependencies
      if: matrix.rust_channel == '1.51.0'
      # Edition 2021 requires Rust 1.56.0: https://doc.rust-lang.org/edition-guide/rust-2021/index.html.
      run: |
        # Uses or-patterns since https://github.com/rust-lang/flate2-rs/commit/76327b14b08ecb616b023d6a6713cc37e9004f99.
        #
        # Rust stabilized or-patterns in 1.53.0: https://github.com/rust-lang/rust/commit/5d04957a4b4714f71d38326fc96a0b0ef6dc5800.
        cargo update -p flate2 --precise 1.0.25
        # Edition 2021 since https://github.com/bluss/indexmap/commit/6ac7330c94bc04ac763a0b9cd8ec9bc576357196.
        cargo update -p indexmap --precise 1.8.2
        # Edition 2021 since https://github.com/rayon-rs/rayon/commit/1b6eba52ebf4f01421b854d299f5feac1b7f2e2c.
        cargo update -p rayon --precise 1.5.3
        cargo update -p rayon-core --precise 1.9.3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Run dwarfdump (macos)
      if: matrix.os == 'macOS-latest'
      run: |
        cargo run --example dwarfdump -- \
            $(find ./target/debug -type f | grep DWARF | grep gimli | head -n 1) \
            > /dev/null
    - name: Run dwarfdump (linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo run --example dwarfdump -- \
            $(find ./target/debug -type f -perm -100 | grep gimli | head -n 1) \
            > /dev/null

  build_fuzz_targets:
    name: Build fuzz targets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - name: Install `cargo fuzz`
        run: cargo install cargo-fuzz --vers "^0.11.0"
      - run: cargo fuzz build -Oa
      - uses: actions/upload-artifact@v3
        with:
          name: fuzz-targets
          path: fuzz/target/x86_64-unknown-linux-gnu/release/debug_*
      - uses: actions/upload-artifact@v3
        with:
          name: fuzz-targets
          path: fuzz/target/x86_64-unknown-linux-gnu/release/eh_*

  run_fuzz_targets:
    strategy:
      matrix:
        fuzz_target: ["debug_abbrev", "debug_aranges", "debug_info", "debug_line", "eh_frame", "eh_frame_hdr"]
    name: "Run `${{matrix.fuzz_target}}` fuzz target"
    needs: build_fuzz_targets
    runs-on: ubuntu-latest
    steps:
      - name: Clone the fuzz corpora
        uses: actions/checkout@v3
        with:
          repository: gimli-rs/gimli-libfuzzer-corpora
          path: corpora
      - name: Download fuzz targets
        uses: actions/download-artifact@v1
        with:
          name: fuzz-targets
        # Note: -max_total_time=300 == 300 seconds == 5 minutes.
      - name: "Run `${{matrix.fuzz_target}}` fuzz target"
        run: |
          mkdir ${{matrix.fuzz_target}}_artifacts
          chmod +x ./fuzz-targets/${{matrix.fuzz_target}}
          ./fuzz-targets/${{matrix.fuzz_target}} ./corpora/${{matrix.fuzz_target}} \
              -max_total_time=300 \
              -artifact_prefix=./${{matrix.fuzz_target}}_artifacts/
      # If fuzzing finds a new crash/panic/etc, upload the input artifacts so we
      # can debug them.
      - name: Upload fuzz artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.fuzz_target}}_artifacts
          path: ./${{matrix.fuzz_target}}_artifacts

  features:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - run: cargo test --no-default-features
      # Ensure gimli can be built without alloc.
      - run: cargo check --no-default-features --features read-core
      - run: cargo test --no-default-features --features read
      - run: cargo test --no-default-features --features read,fallible-iterator
      - run: cargo test --no-default-features --features read,std
      - run: cargo test --no-default-features --features read,endian-reader
      - run: cargo test --no-default-features --features read,endian-reader,std
      - run: cargo test --no-default-features --features write

  bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - run: cargo bench

  cross:
    strategy:
      matrix:
        target:
          # A 32-bit target.
          - "i686-unknown-linux-gnu"
          # A big-endian target
          - "mips64-unknown-linux-gnuabi64"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{matrix.target}}
      - run: cargo install cross
      - run: cross test --target ${{matrix.target}}

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - run: cargo fmt --all -- --check

  coverage:
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin
      options: --security-opt seccomp=unconfined
    steps:
      - uses: actions/checkout@v3
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Run cargo-tarpaulin
        run: cargo tarpaulin --ignore-tests --out Lcov
      - name: Upload to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: './lcov.info'

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - run: cargo doc
